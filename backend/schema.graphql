# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  cart(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartCount(where: CartItemWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  role: Role
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  cart: CartItemManyRelationFilter
  orders: OrderManyRelationFilter
  role: RoleWhereInput
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input CartItemManyRelationFilter {
  every: CartItemWhereInput
  some: CartItemWhereInput
  none: CartItemWhereInput
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  cart: CartItemRelateToManyForUpdateInput
  orders: OrderRelateToManyForUpdateInput
  role: RoleRelateToOneForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input CartItemRelateToManyForUpdateInput {
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  cart: CartItemRelateToManyForCreateInput
  orders: OrderRelateToManyForCreateInput
  role: RoleRelateToOneForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input CartItemRelateToManyForCreateInput {
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Product {
  id: ID!
  name: String
  slug: String
  inventory: Decimal
  price: Decimal
  priceThreshold(
    where: PricingWhereInput! = {}
    orderBy: [PricingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pricing!]
  priceThresholdCount(where: PricingWhereInput! = {}): Int
  recreational: Boolean
  medical: Boolean
  hotDeal: Boolean
  category: Category
  photos(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  photosCount(where: ProductImageWhereInput! = {}): Int
  description: String
  flower: FlowerTrimFreshFrozen
  oil: Oil
  concentrate: Concentrate
  preRoll: PreRoll
  machine: Machine
  vendor: Vendor
  status: String
}

scalar Decimal

input ProductWhereUniqueInput {
  id: ID
  slug: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  inventory: DecimalNullableFilter
  price: DecimalNullableFilter
  priceThreshold: PricingManyRelationFilter
  recreational: BooleanFilter
  medical: BooleanFilter
  hotDeal: BooleanFilter
  category: CategoryWhereInput
  photos: ProductImageManyRelationFilter
  description: StringFilter
  flower: FlowerTrimFreshFrozenWhereInput
  oil: OilWhereInput
  concentrate: ConcentrateWhereInput
  preRoll: PreRollWhereInput
  machine: MachineWhereInput
  vendor: VendorWhereInput
  status: StringNullableFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input PricingManyRelationFilter {
  every: PricingWhereInput
  some: PricingWhereInput
  none: PricingWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ProductImageManyRelationFilter {
  every: ProductImageWhereInput
  some: ProductImageWhereInput
  none: ProductImageWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  inventory: OrderDirection
  price: OrderDirection
  recreational: OrderDirection
  medical: OrderDirection
  hotDeal: OrderDirection
  description: OrderDirection
  status: OrderDirection
}

input ProductUpdateInput {
  name: String
  slug: String
  inventory: Decimal
  price: Decimal
  priceThreshold: PricingRelateToManyForUpdateInput
  recreational: Boolean
  medical: Boolean
  hotDeal: Boolean
  category: CategoryRelateToOneForUpdateInput
  photos: ProductImageRelateToManyForUpdateInput
  description: String
  flower: FlowerTrimFreshFrozenRelateToOneForUpdateInput
  oil: OilRelateToOneForUpdateInput
  concentrate: ConcentrateRelateToOneForUpdateInput
  preRoll: PreRollRelateToOneForUpdateInput
  machine: MachineRelateToOneForUpdateInput
  vendor: VendorRelateToOneForUpdateInput
  status: String
}

input PricingRelateToManyForUpdateInput {
  disconnect: [PricingWhereUniqueInput!]
  set: [PricingWhereUniqueInput!]
  create: [PricingCreateInput!]
  connect: [PricingWhereUniqueInput!]
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ProductImageRelateToManyForUpdateInput {
  disconnect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input FlowerTrimFreshFrozenRelateToOneForUpdateInput {
  create: FlowerTrimFreshFrozenCreateInput
  connect: FlowerTrimFreshFrozenWhereUniqueInput
  disconnect: Boolean
}

input OilRelateToOneForUpdateInput {
  create: OilCreateInput
  connect: OilWhereUniqueInput
  disconnect: Boolean
}

input ConcentrateRelateToOneForUpdateInput {
  create: ConcentrateCreateInput
  connect: ConcentrateWhereUniqueInput
  disconnect: Boolean
}

input PreRollRelateToOneForUpdateInput {
  create: PreRollCreateInput
  connect: PreRollWhereUniqueInput
  disconnect: Boolean
}

input MachineRelateToOneForUpdateInput {
  create: MachineCreateInput
  connect: MachineWhereUniqueInput
  disconnect: Boolean
}

input VendorRelateToOneForUpdateInput {
  create: VendorCreateInput
  connect: VendorWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  slug: String
  inventory: Decimal
  price: Decimal
  priceThreshold: PricingRelateToManyForCreateInput
  recreational: Boolean
  medical: Boolean
  hotDeal: Boolean
  category: CategoryRelateToOneForCreateInput
  photos: ProductImageRelateToManyForCreateInput
  description: String
  flower: FlowerTrimFreshFrozenRelateToOneForCreateInput
  oil: OilRelateToOneForCreateInput
  concentrate: ConcentrateRelateToOneForCreateInput
  preRoll: PreRollRelateToOneForCreateInput
  machine: MachineRelateToOneForCreateInput
  vendor: VendorRelateToOneForCreateInput
  status: String
}

input PricingRelateToManyForCreateInput {
  create: [PricingCreateInput!]
  connect: [PricingWhereUniqueInput!]
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input ProductImageRelateToManyForCreateInput {
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input FlowerTrimFreshFrozenRelateToOneForCreateInput {
  create: FlowerTrimFreshFrozenCreateInput
  connect: FlowerTrimFreshFrozenWhereUniqueInput
}

input OilRelateToOneForCreateInput {
  create: OilCreateInput
  connect: OilWhereUniqueInput
}

input ConcentrateRelateToOneForCreateInput {
  create: ConcentrateCreateInput
  connect: ConcentrateWhereUniqueInput
}

input PreRollRelateToOneForCreateInput {
  create: PreRollCreateInput
  connect: PreRollWhereUniqueInput
}

input MachineRelateToOneForCreateInput {
  create: MachineCreateInput
  connect: MachineWhereUniqueInput
}

input VendorRelateToOneForCreateInput {
  create: VendorCreateInput
  connect: VendorWhereUniqueInput
}

type Oil {
  id: ID!
  label: String
  product: Product
  weight: String
  potency: String
  cbd: Boolean
  oilType: String
  solventUsed: String
}

input OilWhereUniqueInput {
  id: ID
}

input OilWhereInput {
  AND: [OilWhereInput!]
  OR: [OilWhereInput!]
  NOT: [OilWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  weight: StringNullableFilter
  potency: StringFilter
  cbd: BooleanFilter
  oilType: StringNullableFilter
  solventUsed: StringNullableFilter
}

input OilOrderByInput {
  id: OrderDirection
  weight: OrderDirection
  potency: OrderDirection
  cbd: OrderDirection
  oilType: OrderDirection
  solventUsed: OrderDirection
}

input OilUpdateInput {
  product: ProductRelateToOneForUpdateInput
  weight: String
  potency: String
  cbd: Boolean
  oilType: String
  solventUsed: String
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input OilUpdateArgs {
  where: OilWhereUniqueInput!
  data: OilUpdateInput!
}

input OilCreateInput {
  product: ProductRelateToOneForCreateInput
  weight: String
  potency: String
  cbd: Boolean
  oilType: String
  solventUsed: String
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type FlowerTrimFreshFrozen {
  id: ID!
  label: String
  product: Product
  weight: String
  potency: String
  strain: String
  trimMethod: String
  environment: String
}

input FlowerTrimFreshFrozenWhereUniqueInput {
  id: ID
}

input FlowerTrimFreshFrozenWhereInput {
  AND: [FlowerTrimFreshFrozenWhereInput!]
  OR: [FlowerTrimFreshFrozenWhereInput!]
  NOT: [FlowerTrimFreshFrozenWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  weight: StringNullableFilter
  potency: StringFilter
  strain: StringNullableFilter
  trimMethod: StringNullableFilter
  environment: StringNullableFilter
}

input FlowerTrimFreshFrozenOrderByInput {
  id: OrderDirection
  weight: OrderDirection
  potency: OrderDirection
  strain: OrderDirection
  trimMethod: OrderDirection
  environment: OrderDirection
}

input FlowerTrimFreshFrozenUpdateInput {
  product: ProductRelateToOneForUpdateInput
  weight: String
  potency: String
  strain: String
  trimMethod: String
  environment: String
}

input FlowerTrimFreshFrozenUpdateArgs {
  where: FlowerTrimFreshFrozenWhereUniqueInput!
  data: FlowerTrimFreshFrozenUpdateInput!
}

input FlowerTrimFreshFrozenCreateInput {
  product: ProductRelateToOneForCreateInput
  weight: String
  potency: String
  strain: String
  trimMethod: String
  environment: String
}

type Concentrate {
  id: ID!
  label: String
  product: Product
  weight: String
  potency: String
  strain: String
  type: String
}

input ConcentrateWhereUniqueInput {
  id: ID
}

input ConcentrateWhereInput {
  AND: [ConcentrateWhereInput!]
  OR: [ConcentrateWhereInput!]
  NOT: [ConcentrateWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  weight: StringNullableFilter
  potency: StringFilter
  strain: StringNullableFilter
  type: StringNullableFilter
}

input ConcentrateOrderByInput {
  id: OrderDirection
  weight: OrderDirection
  potency: OrderDirection
  strain: OrderDirection
  type: OrderDirection
}

input ConcentrateUpdateInput {
  product: ProductRelateToOneForUpdateInput
  weight: String
  potency: String
  strain: String
  type: String
}

input ConcentrateUpdateArgs {
  where: ConcentrateWhereUniqueInput!
  data: ConcentrateUpdateInput!
}

input ConcentrateCreateInput {
  product: ProductRelateToOneForCreateInput
  weight: String
  potency: String
  strain: String
  type: String
}

type PreRoll {
  id: ID!
  label: String
  product: Product
  size: String
  potency: String
  strain: String
  type: String
  tube: String
}

input PreRollWhereUniqueInput {
  id: ID
}

input PreRollWhereInput {
  AND: [PreRollWhereInput!]
  OR: [PreRollWhereInput!]
  NOT: [PreRollWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  size: StringNullableFilter
  potency: StringFilter
  strain: StringNullableFilter
  type: StringNullableFilter
  tube: StringNullableFilter
}

input PreRollOrderByInput {
  id: OrderDirection
  size: OrderDirection
  potency: OrderDirection
  strain: OrderDirection
  type: OrderDirection
  tube: OrderDirection
}

input PreRollUpdateInput {
  product: ProductRelateToOneForUpdateInput
  size: String
  potency: String
  strain: String
  type: String
  tube: String
}

input PreRollUpdateArgs {
  where: PreRollWhereUniqueInput!
  data: PreRollUpdateInput!
}

input PreRollCreateInput {
  product: ProductRelateToOneForCreateInput
  size: String
  potency: String
  strain: String
  type: String
  tube: String
}

type Machine {
  id: ID!
  label: String
  product: Product
  model: String
  modelYear: String
  condition: String
}

input MachineWhereUniqueInput {
  id: ID
}

input MachineWhereInput {
  AND: [MachineWhereInput!]
  OR: [MachineWhereInput!]
  NOT: [MachineWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  model: StringFilter
  modelYear: StringFilter
  condition: StringNullableFilter
}

input MachineOrderByInput {
  id: OrderDirection
  model: OrderDirection
  modelYear: OrderDirection
  condition: OrderDirection
}

input MachineUpdateInput {
  product: ProductRelateToOneForUpdateInput
  model: String
  modelYear: String
  condition: String
}

input MachineUpdateArgs {
  where: MachineWhereUniqueInput!
  data: MachineUpdateInput!
}

input MachineCreateInput {
  product: ProductRelateToOneForCreateInput
  model: String
  modelYear: String
  condition: String
}

type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  product: Product
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  product: ProductWhereInput
}

input ProductImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ProductImageUpdateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneForCreateInput
}

type Category {
  id: ID!
  name: String
  slug: String
  product(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productCount(where: ProductWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  product: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input CategoryUpdateInput {
  name: String
  slug: String
  product: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  slug: String
  product: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Vendor {
  id: ID!
  name: String
  email: String
  contact_name: String
  phone: String
  mobile: String
  vendor_ID: String
  notes: String
  product(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productCount(where: ProductWhereInput! = {}): Int
}

input VendorWhereUniqueInput {
  id: ID
}

input VendorWhereInput {
  AND: [VendorWhereInput!]
  OR: [VendorWhereInput!]
  NOT: [VendorWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  contact_name: StringFilter
  phone: StringFilter
  mobile: StringFilter
  vendor_ID: StringFilter
  notes: StringFilter
  product: ProductManyRelationFilter
}

input VendorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  contact_name: OrderDirection
  phone: OrderDirection
  mobile: OrderDirection
  vendor_ID: OrderDirection
  notes: OrderDirection
}

input VendorUpdateInput {
  name: String
  email: String
  contact_name: String
  phone: String
  mobile: String
  vendor_ID: String
  notes: String
  product: ProductRelateToManyForUpdateInput
}

input VendorUpdateArgs {
  where: VendorWhereUniqueInput!
  data: VendorUpdateInput!
}

input VendorCreateInput {
  name: String
  email: String
  contact_name: String
  phone: String
  mobile: String
  vendor_ID: String
  notes: String
  product: ProductRelateToManyForCreateInput
}

type Pricing {
  id: ID!
  name: String
  price: Decimal
  amount: Int
}

input PricingWhereUniqueInput {
  id: ID
}

input PricingWhereInput {
  AND: [PricingWhereInput!]
  OR: [PricingWhereInput!]
  NOT: [PricingWhereInput!]
  id: IDFilter
  name: StringFilter
  price: DecimalFilter
  amount: IntFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input PricingOrderByInput {
  id: OrderDirection
  name: OrderDirection
  price: OrderDirection
  amount: OrderDirection
}

input PricingUpdateInput {
  name: String
  price: Decimal
  amount: Int
}

input PricingUpdateArgs {
  where: PricingWhereUniqueInput!
  data: PricingUpdateInput!
}

input PricingCreateInput {
  name: String
  price: Decimal
  amount: Int
}

type CartItem {
  id: ID!
  quantity: Decimal
  product: Product
  user: User
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  quantity: DecimalFilter
  product: ProductWhereInput
  user: UserWhereInput
}

input CartItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
}

input CartItemUpdateInput {
  quantity: Decimal
  product: ProductRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  quantity: Decimal
  product: ProductRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type OrderItem {
  id: ID!
  name: String
  description: String
  photo: ProductImage
  price: Int
  quantity: Decimal
  order: Order
}

input OrderItemWhereUniqueInput {
  id: ID
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  photo: ProductImageWhereInput
  price: IntNullableFilter
  quantity: DecimalNullableFilter
  order: OrderWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input OrderItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  quantity: OrderDirection
}

input OrderItemUpdateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneForUpdateInput
  price: Int
  quantity: Decimal
  order: OrderRelateToOneForUpdateInput
}

input ProductImageRelateToOneForUpdateInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
  disconnect: Boolean
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input OrderItemUpdateArgs {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateInput!
}

input OrderItemCreateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneForCreateInput
  price: Int
  quantity: Decimal
  order: OrderRelateToOneForCreateInput
}

input ProductImageRelateToOneForCreateInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type Order {
  id: ID!
  label: String
  total: Int
  items(
    where: OrderItemWhereInput! = {}
    orderBy: [OrderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderItem!]
  itemsCount(where: OrderItemWhereInput! = {}): Int
  user: User
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  total: IntNullableFilter
  items: OrderItemManyRelationFilter
  user: UserWhereInput
}

input OrderItemManyRelationFilter {
  every: OrderItemWhereInput
  some: OrderItemWhereInput
  none: OrderItemWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  total: OrderDirection
}

input OrderUpdateInput {
  total: Int
  items: OrderItemRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input OrderItemRelateToManyForUpdateInput {
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  total: Int
  items: OrderItemRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
}

input OrderItemRelateToManyForCreateInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageProducts: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageCart: BooleanFilter
  canManageOrders: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageProducts: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageCart: OrderDirection
  canManageOrders: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(id: ID, where: ProductWhereUniqueInput): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createOil(data: OilCreateInput!): Oil
  createOils(data: [OilCreateInput!]!): [Oil]
  updateOil(where: OilWhereUniqueInput!, data: OilUpdateInput!): Oil
  updateOils(data: [OilUpdateArgs!]!): [Oil]
  deleteOil(where: OilWhereUniqueInput!): Oil
  deleteOils(where: [OilWhereUniqueInput!]!): [Oil]
  createFlowerTrimFreshFrozen(
    data: FlowerTrimFreshFrozenCreateInput!
  ): FlowerTrimFreshFrozen
  createFlowerTrimFreshFrozens(
    data: [FlowerTrimFreshFrozenCreateInput!]!
  ): [FlowerTrimFreshFrozen]
  updateFlowerTrimFreshFrozen(
    where: FlowerTrimFreshFrozenWhereUniqueInput!
    data: FlowerTrimFreshFrozenUpdateInput!
  ): FlowerTrimFreshFrozen
  updateFlowerTrimFreshFrozens(
    data: [FlowerTrimFreshFrozenUpdateArgs!]!
  ): [FlowerTrimFreshFrozen]
  deleteFlowerTrimFreshFrozen(
    where: FlowerTrimFreshFrozenWhereUniqueInput!
  ): FlowerTrimFreshFrozen
  deleteFlowerTrimFreshFrozens(
    where: [FlowerTrimFreshFrozenWhereUniqueInput!]!
  ): [FlowerTrimFreshFrozen]
  createConcentrate(data: ConcentrateCreateInput!): Concentrate
  createConcentrates(data: [ConcentrateCreateInput!]!): [Concentrate]
  updateConcentrate(
    where: ConcentrateWhereUniqueInput!
    data: ConcentrateUpdateInput!
  ): Concentrate
  updateConcentrates(data: [ConcentrateUpdateArgs!]!): [Concentrate]
  deleteConcentrate(where: ConcentrateWhereUniqueInput!): Concentrate
  deleteConcentrates(where: [ConcentrateWhereUniqueInput!]!): [Concentrate]
  createPreRoll(data: PreRollCreateInput!): PreRoll
  createPreRolls(data: [PreRollCreateInput!]!): [PreRoll]
  updatePreRoll(
    where: PreRollWhereUniqueInput!
    data: PreRollUpdateInput!
  ): PreRoll
  updatePreRolls(data: [PreRollUpdateArgs!]!): [PreRoll]
  deletePreRoll(where: PreRollWhereUniqueInput!): PreRoll
  deletePreRolls(where: [PreRollWhereUniqueInput!]!): [PreRoll]
  createMachine(data: MachineCreateInput!): Machine
  createMachines(data: [MachineCreateInput!]!): [Machine]
  updateMachine(
    where: MachineWhereUniqueInput!
    data: MachineUpdateInput!
  ): Machine
  updateMachines(data: [MachineUpdateArgs!]!): [Machine]
  deleteMachine(where: MachineWhereUniqueInput!): Machine
  deleteMachines(where: [MachineWhereUniqueInput!]!): [Machine]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(
    where: ProductImageWhereUniqueInput!
    data: ProductImageUpdateInput!
  ): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createVendor(data: VendorCreateInput!): Vendor
  createVendors(data: [VendorCreateInput!]!): [Vendor]
  updateVendor(where: VendorWhereUniqueInput!, data: VendorUpdateInput!): Vendor
  updateVendors(data: [VendorUpdateArgs!]!): [Vendor]
  deleteVendor(where: VendorWhereUniqueInput!): Vendor
  deleteVendors(where: [VendorWhereUniqueInput!]!): [Vendor]
  createPricing(data: PricingCreateInput!): Pricing
  createPricings(data: [PricingCreateInput!]!): [Pricing]
  updatePricing(
    where: PricingWhereUniqueInput!
    data: PricingUpdateInput!
  ): Pricing
  updatePricings(data: [PricingUpdateArgs!]!): [Pricing]
  deletePricing(where: PricingWhereUniqueInput!): Pricing
  deletePricings(where: [PricingWhereUniqueInput!]!): [Pricing]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(
    where: CartItemWhereUniqueInput!
    data: CartItemUpdateInput!
  ): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createOrderItem(data: OrderItemCreateInput!): OrderItem
  createOrderItems(data: [OrderItemCreateInput!]!): [OrderItem]
  updateOrderItem(
    where: OrderItemWhereUniqueInput!
    data: OrderItemUpdateInput!
  ): OrderItem
  updateOrderItems(data: [OrderItemUpdateArgs!]!): [OrderItem]
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteOrderItems(where: [OrderItemWhereUniqueInput!]!): [OrderItem]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  addToCart(productId: ID!, quantity: Decimal): CartItem
  checkout(token: String!): Order
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  oils(
    where: OilWhereInput! = {}
    orderBy: [OilOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Oil!]
  oil(where: OilWhereUniqueInput!): Oil
  oilsCount(where: OilWhereInput! = {}): Int
  flowerTrimFreshFrozens(
    where: FlowerTrimFreshFrozenWhereInput! = {}
    orderBy: [FlowerTrimFreshFrozenOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FlowerTrimFreshFrozen!]
  flowerTrimFreshFrozen(
    where: FlowerTrimFreshFrozenWhereUniqueInput!
  ): FlowerTrimFreshFrozen
  flowerTrimFreshFrozensCount(where: FlowerTrimFreshFrozenWhereInput! = {}): Int
  concentrates(
    where: ConcentrateWhereInput! = {}
    orderBy: [ConcentrateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Concentrate!]
  concentrate(where: ConcentrateWhereUniqueInput!): Concentrate
  concentratesCount(where: ConcentrateWhereInput! = {}): Int
  preRolls(
    where: PreRollWhereInput! = {}
    orderBy: [PreRollOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PreRoll!]
  preRoll(where: PreRollWhereUniqueInput!): PreRoll
  preRollsCount(where: PreRollWhereInput! = {}): Int
  machines(
    where: MachineWhereInput! = {}
    orderBy: [MachineOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Machine!]
  machine(where: MachineWhereUniqueInput!): Machine
  machinesCount(where: MachineWhereInput! = {}): Int
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  vendors(
    where: VendorWhereInput! = {}
    orderBy: [VendorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vendor!]
  vendor(where: VendorWhereUniqueInput!): Vendor
  vendorsCount(where: VendorWhereInput! = {}): Int
  pricings(
    where: PricingWhereInput! = {}
    orderBy: [PricingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pricing!]
  pricing(where: PricingWhereUniqueInput!): Pricing
  pricingsCount(where: PricingWhereInput! = {}): Int
  cartItems(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  orderItems(
    where: OrderItemWhereInput! = {}
    orderBy: [OrderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderItem!]
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItemsCount(where: OrderItemWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
  allOrders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  Order(where: OrderWhereUniqueInput!): Order
  Product(where: ProductWhereUniqueInput!): Product
  _allProductsMeta: _AllProductsMeta
  allProducts(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    first: Int
  ): [Product!]
}

type _AllProductsMeta {
  count: Int
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
