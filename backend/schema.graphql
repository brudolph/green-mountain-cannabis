# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  cart(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartCount(where: CartItemWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  cart: CartItemManyRelationFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input CartItemManyRelationFilter {
  every: CartItemWhereInput
  some: CartItemWhereInput
  none: CartItemWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  cart: CartItemRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input CartItemRelateToManyForUpdateInput {
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  cart: CartItemRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input CartItemRelateToManyForCreateInput {
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  inventory: Decimal
  producttype: String
  weight: String
  potency: Int
  strain: String
  environment: String
  price_threshold(
    where: PricingWhereInput! = {}
    orderBy: [PricingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pricing!]
  price_thresholdCount(where: PricingWhereInput! = {}): Int
  description: String
  photo: ProductImage
  status: String
  vendor: Vendor
}

scalar Decimal

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  inventory: DecimalFilter
  producttype: StringFilter
  weight: StringFilter
  potency: IntFilter
  strain: StringNullableFilter
  environment: StringNullableFilter
  price_threshold: PricingManyRelationFilter
  description: StringFilter
  photo: ProductImageWhereInput
  status: StringNullableFilter
  vendor: VendorWhereInput
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PricingManyRelationFilter {
  every: PricingWhereInput
  some: PricingWhereInput
  none: PricingWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  inventory: OrderDirection
  producttype: OrderDirection
  weight: OrderDirection
  potency: OrderDirection
  strain: OrderDirection
  environment: OrderDirection
  description: OrderDirection
  status: OrderDirection
}

input ProductUpdateInput {
  name: String
  inventory: Decimal
  producttype: String
  weight: String
  potency: Int
  strain: String
  environment: String
  price_threshold: PricingRelateToManyForUpdateInput
  description: String
  photo: ProductImageRelateToOneForUpdateInput
  status: String
  vendor: VendorRelateToOneForUpdateInput
}

input PricingRelateToManyForUpdateInput {
  disconnect: [PricingWhereUniqueInput!]
  set: [PricingWhereUniqueInput!]
  create: [PricingCreateInput!]
  connect: [PricingWhereUniqueInput!]
}

input ProductImageRelateToOneForUpdateInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
  disconnect: Boolean
}

input VendorRelateToOneForUpdateInput {
  create: VendorCreateInput
  connect: VendorWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  inventory: Decimal
  producttype: String
  weight: String
  potency: Int
  strain: String
  environment: String
  price_threshold: PricingRelateToManyForCreateInput
  description: String
  photo: ProductImageRelateToOneForCreateInput
  status: String
  vendor: VendorRelateToOneForCreateInput
}

input PricingRelateToManyForCreateInput {
  create: [PricingCreateInput!]
  connect: [PricingWhereUniqueInput!]
}

input ProductImageRelateToOneForCreateInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
}

input VendorRelateToOneForCreateInput {
  create: VendorCreateInput
  connect: VendorWhereUniqueInput
}

type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  product: Product
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  product: ProductWhereInput
}

input ProductImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ProductImageUpdateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Vendor {
  id: ID!
  name: String
  email: String
  contact: String
  vendor_ID: String
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input VendorWhereUniqueInput {
  id: ID
  email: String
  contact: String
}

input VendorWhereInput {
  AND: [VendorWhereInput!]
  OR: [VendorWhereInput!]
  NOT: [VendorWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  contact: StringFilter
  vendor_ID: StringFilter
  products: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input VendorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  contact: OrderDirection
  vendor_ID: OrderDirection
}

input VendorUpdateInput {
  name: String
  email: String
  contact: String
  vendor_ID: String
  products: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input VendorUpdateArgs {
  where: VendorWhereUniqueInput!
  data: VendorUpdateInput!
}

input VendorCreateInput {
  name: String
  email: String
  contact: String
  vendor_ID: String
  products: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Pricing {
  id: ID!
  name: String
  price: Int
  amount: Int
  weight: String
  threshold: String
  product(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productCount(where: ProductWhereInput! = {}): Int
}

input PricingWhereUniqueInput {
  id: ID
}

input PricingWhereInput {
  AND: [PricingWhereInput!]
  OR: [PricingWhereInput!]
  NOT: [PricingWhereInput!]
  id: IDFilter
  name: StringFilter
  price: IntFilter
  amount: IntFilter
  weight: StringFilter
  threshold: StringNullableFilter
  product: ProductManyRelationFilter
}

input PricingOrderByInput {
  id: OrderDirection
  name: OrderDirection
  price: OrderDirection
  amount: OrderDirection
  weight: OrderDirection
  threshold: OrderDirection
}

input PricingUpdateInput {
  name: String
  price: Int
  amount: Int
  weight: String
  threshold: String
  product: ProductRelateToManyForUpdateInput
}

input PricingUpdateArgs {
  where: PricingWhereUniqueInput!
  data: PricingUpdateInput!
}

input PricingCreateInput {
  name: String
  price: Int
  amount: Int
  weight: String
  threshold: String
  product: ProductRelateToManyForCreateInput
}

type CartItem {
  id: ID!
  quantity: Int
  product: Product
  user: User
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  quantity: IntFilter
  product: ProductWhereInput
  user: UserWhereInput
}

input CartItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
}

input CartItemUpdateInput {
  quantity: Int
  product: ProductRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  quantity: Int
  product: ProductRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(
    where: ProductImageWhereUniqueInput!
    data: ProductImageUpdateInput!
  ): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createVendor(data: VendorCreateInput!): Vendor
  createVendors(data: [VendorCreateInput!]!): [Vendor]
  updateVendor(where: VendorWhereUniqueInput!, data: VendorUpdateInput!): Vendor
  updateVendors(data: [VendorUpdateArgs!]!): [Vendor]
  deleteVendor(where: VendorWhereUniqueInput!): Vendor
  deleteVendors(where: [VendorWhereUniqueInput!]!): [Vendor]
  createPricing(data: PricingCreateInput!): Pricing
  createPricings(data: [PricingCreateInput!]!): [Pricing]
  updatePricing(
    where: PricingWhereUniqueInput!
    data: PricingUpdateInput!
  ): Pricing
  updatePricings(data: [PricingUpdateArgs!]!): [Pricing]
  deletePricing(where: PricingWhereUniqueInput!): Pricing
  deletePricings(where: [PricingWhereUniqueInput!]!): [Pricing]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(
    where: CartItemWhereUniqueInput!
    data: CartItemUpdateInput!
  ): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  addToCart(productId: ID): CartItem
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  vendors(
    where: VendorWhereInput! = {}
    orderBy: [VendorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vendor!]
  vendor(where: VendorWhereUniqueInput!): Vendor
  vendorsCount(where: VendorWhereInput! = {}): Int
  pricings(
    where: PricingWhereInput! = {}
    orderBy: [PricingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pricing!]
  pricing(where: PricingWhereUniqueInput!): Pricing
  pricingsCount(where: PricingWhereInput! = {}): Int
  cartItems(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
