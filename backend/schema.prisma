// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      String     @id @default(cuid())
  name                    String     @default("")
  email                   String     @unique @default("")
  phone                   String     @default("")
  jobTitle                String     @default("")
  license                 String     @default("")
  password                String
  cart                    CartItem[] @relation("CartItem_user")
  orders                  Order[]    @relation("Order_user")
  role                    Role?      @relation("User_role", fields: [roleId], references: [id])
  roleId                  String?    @map("role")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([roleId])
}

model Product {
  id                                 String                  @id @default(cuid())
  name                               String                  @default("")
  slug                               String                  @unique @default("")
  inventory                          Decimal?                @default("1.0") @postgresql.Decimal(18, 2)
  price                              Decimal?                @default("0") @postgresql.Decimal(18, 2)
  priceThreshold                     Pricing[]               @relation("Product_priceThreshold")
  recreational                       Boolean                 @default(false)
  medical                            Boolean                 @default(false)
  hotDeal                            Boolean                 @default(false)
  topPick                            Boolean                 @default(false)
  category                           Category?               @relation("Product_category", fields: [categoryId], references: [id])
  categoryId                         String?                 @map("category")
  photos                             ProductImage[]          @relation("ProductImage_product")
  description                        String                  @default("")
  flower                             FlowerTrimFreshFrozen?  @relation("Product_flower", fields: [flowerId], references: [id])
  flowerId                           String?                 @map("flower")
  oil                                Oil?                    @relation("Product_oil", fields: [oilId], references: [id])
  oilId                              String?                 @map("oil")
  concentrate                        Concentrate?            @relation("Product_concentrate", fields: [concentrateId], references: [id])
  concentrateId                      String?                 @map("concentrate")
  preRoll                            PreRoll?                @relation("Product_preRoll", fields: [preRollId], references: [id])
  preRollId                          String?                 @map("preRoll")
  machine                            Machine?                @relation("Product_machine", fields: [machineId], references: [id])
  machineId                          String?                 @map("machine")
  vendor                             Vendor?                 @relation("Product_vendor", fields: [vendorId], references: [id])
  vendorId                           String?                 @map("vendor")
  status                             String?                 @default("DRAFT")
  from_Oil_product                   Oil[]                   @relation("Oil_product")
  from_FlowerTrimFreshFrozen_product FlowerTrimFreshFrozen[] @relation("FlowerTrimFreshFrozen_product")
  from_Concentrate_product           Concentrate[]           @relation("Concentrate_product")
  from_PreRoll_product               PreRoll[]               @relation("PreRoll_product")
  from_Machine_product               Machine[]               @relation("Machine_product")
  from_CartItem_product              CartItem[]              @relation("CartItem_product")

  @@index([categoryId])
  @@index([flowerId])
  @@index([oilId])
  @@index([concentrateId])
  @@index([preRollId])
  @@index([machineId])
  @@index([vendorId])
}

model Oil {
  id               String    @id @default(cuid())
  product          Product?  @relation("Oil_product", fields: [productId], references: [id])
  productId        String?   @map("product")
  weight           String?   @default("pound")
  potency          String    @default("")
  cbd              Boolean   @default(false)
  oilType          String?
  solventUsed      String?
  from_Product_oil Product[] @relation("Product_oil")

  @@index([productId])
}

model FlowerTrimFreshFrozen {
  id                  String    @id @default(cuid())
  product             Product?  @relation("FlowerTrimFreshFrozen_product", fields: [productId], references: [id])
  productId           String?   @map("product")
  weight              String?
  potency             String    @default("")
  strain              String?
  trimMethod          String?
  environment         String?
  from_Product_flower Product[] @relation("Product_flower")

  @@index([productId])
}

model Concentrate {
  id                       String    @id @default(cuid())
  product                  Product?  @relation("Concentrate_product", fields: [productId], references: [id])
  productId                String?   @map("product")
  weight                   String?
  potency                  String    @default("")
  strain                   String?
  type                     String?
  from_Product_concentrate Product[] @relation("Product_concentrate")

  @@index([productId])
}

model PreRoll {
  id                   String    @id @default(cuid())
  product              Product?  @relation("PreRoll_product", fields: [productId], references: [id])
  productId            String?   @map("product")
  size                 String?
  potency              String    @default("")
  strain               String?
  type                 String?
  tube                 String?
  from_Product_preRoll Product[] @relation("Product_preRoll")

  @@index([productId])
}

model Machine {
  id                   String    @id @default(cuid())
  product              Product?  @relation("Machine_product", fields: [productId], references: [id])
  productId            String?   @map("product")
  model                String    @default("")
  modelYear            String    @default("")
  condition            String?
  from_Product_machine Product[] @relation("Product_machine")

  @@index([productId])
}

model ProductImage {
  id                   String      @id @default(cuid())
  image                Json?
  altText              String      @default("")
  product              Product?    @relation("ProductImage_product", fields: [productId], references: [id])
  productId            String?     @map("product")
  from_OrderItem_photo OrderItem[] @relation("OrderItem_photo")

  @@index([productId])
}

model Category {
  id      String    @id @default(cuid())
  name    String    @unique @default("")
  slug    String    @unique @default("")
  product Product[] @relation("Product_category")
}

model Vendor {
  id           String    @id @default(cuid())
  name         String    @unique @default("")
  email        String    @default("")
  contact_name String    @default("")
  phone        String    @default("")
  mobile       String    @default("")
  vendor_ID    String    @default("")
  notes        String    @default("")
  product      Product[] @relation("Product_vendor")
}

model Pricing {
  id                          String    @id @default(cuid())
  name                        String    @default("")
  price                       Decimal   @default("0") @postgresql.Decimal(18, 2)
  amount                      Int
  from_Product_priceThreshold Product[] @relation("Product_priceThreshold")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Decimal  @default("0") @postgresql.Decimal(18, 2)
  product   Product? @relation("CartItem_product", fields: [productId], references: [id])
  productId String?  @map("product")
  user      User?    @relation("CartItem_user", fields: [userId], references: [id])
  userId    String?  @map("user")

  @@index([productId])
  @@index([userId])
}

model OrderItem {
  id          String        @id @default(cuid())
  name        String        @default("")
  description String        @default("")
  photo       ProductImage? @relation("OrderItem_photo", fields: [photoId], references: [id])
  photoId     String?       @map("photo")
  price       Decimal?      @postgresql.Decimal(18, 4)
  weight      String        @default("")
  quantity    Decimal?      @postgresql.Decimal(18, 4)
  order       Order?        @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId     String?       @map("order")

  @@index([photoId])
  @@index([orderId])
}

model Order {
  id        String      @id @default(cuid())
  total     Decimal?    @postgresql.Decimal(18, 4)
  items     OrderItem[] @relation("OrderItem_order")
  orderDate String      @default("")
  user      User?       @relation("Order_user", fields: [userId], references: [id])
  userId    String?     @map("user")

  @@index([userId])
}

model Role {
  id                String  @id @default(cuid())
  name              String  @unique @default("")
  canManageProducts Boolean @default(false)
  canReadProducts   Boolean @default(false)
  canSeeOtherUsers  Boolean @default(false)
  canManageUsers    Boolean @default(false)
  canManageRoles    Boolean @default(false)
  canSeeOwnRole     Boolean @default(false)
  canManageCart     Boolean @default(false)
  canManageOrders   Boolean @default(false)
  assignedTo        User[]  @relation("User_role")
}
